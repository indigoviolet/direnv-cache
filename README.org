:DOC-CONFIG:
#+startup: fold
#+title: Direnv caching
#+author: Venky Iyer
#+email: indigoviolet@gmail.com
:END:

This is an implementation of caching for [[https://direnv.net/][direnv]].

~direnv-cache~ caches the environment into a ~.env~ file using ~direnv~ (and then
loads the ~.env~ using direnv itself).

It supports rebuilds when [[*Cache validity][the cache becomes invalid]].

* Motivation

I use direnv for setting up [[https://python-poetry.org/][Poetry]] ([[https://github.com/direnv/direnv/wiki/Python#poetry][layout_poetry]]) or conda, and in these
scenarios, the environment created via direnv doesn't change all that often, and
is amenable to caching.

I also use direnv in Emacs ([[https://github.com/purcell/envrc][envrc]]), and having fast loads would make my editor
start up faster.

I could use a ~.env~ directly but it's convenient to create the environment
programmatically with direnv.

* Installation

The accompanying file [[cache.sh][cache.sh]] should be dropped into direnv's library: either
appended to ~~/.config/direnv/direnvrc~ or dropped into ~~/.config/direnv/lib/~

#+begin_src bash

#+end_src

* Usage

Add the ~use_cache~ function to the top of your ~.envrc~:


#+begin_example
$> cat .envrc
#+end_example



* Environment variables

- ~DIRENV_CACHE_IGNORE~ ::
- ~DIRENV_CACHE_DEBUG~ ::

* Should this be built into direnv?

* Implementation Notes

** Rough model of how direnv works

1. ~direnv hook <shell>~ sets up ~direnv export json~ to be called on each prompt
   (~precmd~) and directory change (~chpwd~)
2. upon ~chwpd~, if we are /entering/ a directory containing an ~envrc~, we execute it
   in a subshell, compare the env from the subshell to our own, and then apply
   that diff to our env. (/loading/).
3. Note that the env in the subshell that ~direnv export json~ is executed in, is
   carefully restored to the "pre-direnv" state, by reverting ~DIRENV_DIFF~.
4. Several direnv-specific state tracking env variables are set - ex.
   ~DIRENV_FILE~ (the envrc file), ~DIRENV_DIR~ (the directory containing the
   envrc), ~DIRENV_WATCHES~ (name, mtime, existence of all watched files),
   ~DIRENV_DIFF~ (the diff that was applied).
5. Upon ~chwpd~, if we already have these variables in our environment, and are
   leaving the ~DIRENV_DIR~, these tracking variables are unset, and the inverse
   of ~DIRENV_DIFF~ is applied. (/unloading/)
6. Upon ~precmd~, if ~DIRENV_WATCHES~ is /stale/ i.e, the watched files have changed,
   direnv loads again (~direnv current~ implements this for one file at a time).
7. ~direnv watch~ and friends add to ~DIRENV_WATCHES~, so they act as dependencies
   for the env state.

#+begin_src bash :results output
direnv hook zsh
#+end_src

#+RESULTS:
#+begin_example

_direnv_hook() {
  trap -- '' SIGINT;
  eval "$("/home/linuxbrew/.linuxbrew/Cellar/direnv/2.30.3/bin/direnv" export zsh)";
  trap - SIGINT;
}
typeset -ag precmd_functions;
if [[ -z "${precmd_functions[(r)_direnv_hook]+1}" ]]; then
  precmd_functions=( _direnv_hook ${precmd_functions[@]} )
fi
typeset -ag chpwd_functions;
if [[ -z "${chpwd_functions[(r)_direnv_hook]+1}" ]]; then
  chpwd_functions=( _direnv_hook ${chpwd_functions[@]} )
fi
#+end_example

** How the cache works

Caching is only useful when re-entering a directory that hasn't changed in the
interim. In this case, we would like to restore our previous state.

1. ~use_cache~ is the first statement in the ~envrc~, so it can short circuit if
   loading from cache.

   Here are the scenarios when the envrc is executed:

   (use_cache sees a DIRENV_WATCHES containing only the envrc & allow. files)

   |-----------------+-----------------------------+----------------------------+---------------------------|
   | invocation mode | DIRENV_WATCHES              | cache verification needed? | cache action              |
   |-----------------+-----------------------------+----------------------------+---------------------------|
   | precmd          | set, stale                  | no - known to be invalid   | rebuild                   |
   | direnv reload   | set, irrelevant             | no - forced reload         | rebuild                   |
   | chdir (enter)   | unset or from a previous RC | yes - might be stale       | rebuild if cache is valid |
   |-----------------+-----------------------------+----------------------------+---------------------------|

   Unfortunately, there doesn't appear to be any way to know which of these
   invocation modes we are in -- since the envrc always executes in a "clean"
   subshell.

   All we know is that direnv wants to execute the envrc; we can test whether
   the cache is valid (based on whether the cached DIRENV_WATCHES is stale), and
   rebuild if it is not, or load from cache if valid.

2. building the cache: run ~direnv export json~ in a clean subshell, and convert
   that into ~dotenv~ format into ~.env~ (using ~jq~)
3. if the cache is valid: load it via ~dotenv_if_exists~, otherwise build it
4. some extra env switches are provided to help debug things:
   ~DIRENV_CACHE_IGNORE~, ~DIRENV_CACHE_DEBUG~

*** deserializing DIRENV_WATCHES

DIRENV_WATCHES is in gzenv format, ie base64-urlencoded + zlib + json

#+begin_src bash
direnv show_dump $DIRENV_WATCHES
#+end_src

#+begin_src bash
echo $DIRENV_WATCHES | python -c "import sys; import zlib; import base64; print(zlib.decompress(base64.urlsafe_b64decode(sys.stdin.read())).decode('utf-8'))" | jq '.'
#+end_src

#+begin_src bash
{ printf "\x1f\x8b\x08\x00\x00\x00\x00\x00" ; echo $DIRENV_WATCHES | basenc --base64url -d ; } | gzip -d | jq '.'
#+end_src
*** Watching .env

~dotenv_if_exists~ will usually ~watch_file~ ~.env~, which modifies ~DIRENV_WATCHES~,
but then immediately the ~DIRENV_WATCHES~ from the cache will overwrite this, so
that .env will not be watched.

Do we even  _want_ to watch the cache file? I don't think so: users shouldn't be
modifying it directly; if deleted, it will get recreated the next time ~direnv~
tries to load something.

**** Note, if we end up wanting to watch .env

Attempting to get the cache file into DIRENV_WATCHES is tricky:

- DIRENV_WATCHES is captured in the subshell, and won't contain .env by default.
  We do need to capture DIRENV_WATCHES, since the .envrc could be registering
  files to watch.
- the first problem is mentioned above: ~dotenv_if_exists~ will ~watch_file~ on the
  cache file but the resulting DIRENV_WATCHES will be lost when the cache is
  actually loaded.
- So we need to ~watch_file .env~ after the cache is created and loaded; this
  generates a new DIRENV_WATCHES containing the current stat of .env. But if we
  modify .env after this to update the cached value of DIRENV_WATCHES, our cache
  will appear invalid (since DIRENV_WATCHES is stale), and we will rebuild the
  cache.
- The trick could be to first update .env with a DIRENV_WATCHES value that
  includes itself, and then the env, as below. Here we are appending a second
  ~export~ of DIRENV_WATCHES to .env, which will override the earlier one.

#+begin_example bash
{ direnv watch json .env | jq -r '"export DIRENV_WATCHES=\(.DIRENV_WATCHES|@sh)"' >> .env; eval $(direnv watch zsh .env); }
#+end_example

*** Benchmarking

**** Setup

#+begin_src toml :tangle pyproject.toml
[tool.poetry]
name = "direnv-cache-test"
version = "0.1.0"
description = "Test project for benchmarking direnv-cache."
authors = ["Venky Iyer <indigoviolet@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.8"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
#+end_src

#+begin_src conf :tangle envrc_with_cache
use_cache
layout_poetry
#+end_src

#+begin_src conf :tangle envrc_without_cache
layout_poetry
#+end_src


#+begin_src conf :tangle tool-versions
python 3.8.1
#+end_src

#+begin_src bash :results output
brew install hyperfine
#+end_src

#+begin_src bash :results output
cp cache.sh ~/.config/direnv/05-cache.sh
icdiff cache.sh ~/.config/direnv/05-cache.sh
#+end_src

#+RESULTS:

**** Create directories

#+name: dir-vars
#+begin_src bash
WITH_CACHE_DIR=/tmp/with_cache WITHOUT_CACHE_DIR=/tmp/without_cache
#+end_src

#+RESULTS: dir-vars

#+begin_src bash :results output :include dir-vars :prologue "exec 2>&1"
rm $WITH_CACHE_DIR $WITHOUT_CACHE_DIR -rf
mkdir $WITH_CACHE_DIR $WITHOUT_CACHE_DIR
ln -sf $(realpath pyproject.toml) $WITH_CACHE_DIR/
ln -sf $(realpath tool-versions) $WITH_CACHE_DIR/
( cd $WITH_CACHE_DIR && poetry install )
ln -sf $(realpath envrc_with_cache) $WITH_CACHE_DIR/.envrc
direnv allow $WITH_CACHE_DIR/.envrc

ln -sf $(realpath pyproject.toml) $WITHOUT_CACHE_DIR/
ln -sf $(realpath tool-versions) $WITHOUT_CACHE_DIR/
( cd $WITHOUT_CACHE_DIR && poetry install )
ln -sf $(realpath envrc_without_cache) $WITHOUT_CACHE_DIR/.envrc
direnv allow $WITHOUT_CACHE_DIR/.envrc
:
#+end_src

#+RESULTS:
#+begin_example
Creating virtualenv direnv-cache-test in /tmp/with_cache/.venv
Updating dependencies
Resolving dependencies...

Writing lock file
Creating virtualenv direnv-cache-test in /tmp/without_cache/.venv
Updating dependencies
Resolving dependencies...

Writing lock file
#+end_example


**** Results

***** ensure cache
#+begin_src bash :results output :prologue "exec 2>&1" :include dir-vars
export DIRENV_CACHE_DEBUG=1
direnv exec "$WITH_CACHE_DIR" bash -c "ls $WITH_CACHE_DIR/.env -al"
:
#+end_src

#+RESULTS:
: direnv: loading /tmp/with_cache/.envrc
: Loaded from cache /tmp/with_cache/.env (status: 0)
: -rw-rw-r-- 1 venky venky 1317 Mar 19 15:49 /tmp/with_cache/.env


***** measure
#+begin_src bash :results output :include dir-vars
hyperfine -w 10 -L dir "$WITH_CACHE_DIR","$WITHOUT_CACHE_DIR" 'cd {dir}'
#+end_src

#+RESULTS:
#+begin_example
Benchmark 1: cd /tmp/with_cache
  Time (mean ± σ):       0.0 ms ±   0.1 ms    [User: 0.1 ms, System: 0.1 ms]
  Range (min … max):     0.0 ms …   1.5 ms    3353 runs

Benchmark 2: cd /tmp/without_cache
  Time (mean ± σ):       0.1 ms ±   0.1 ms    [User: 0.1 ms, System: 0.1 ms]
  Range (min … max):     0.0 ms …   4.6 ms    3140 runs

Summary
  'cd /tmp/with_cache' ran
    1.13 ± 3.65 times faster than 'cd /tmp/without_cache'
#+end_example

* Code
:PROPERTIES:
:header-args:bash: :comments both :tangle cache.sh
:END:

** Shellcheck

#+begin_src bash :comments no
# shellcheck disable=SC2155
# shellcheck disable=SC1090
#+end_src

** Main entry point
#+begin_src bash
use_cache() {
    [[ -v DIRENV_CACHE_IGNORE ]] && {
        _debug "Ignoring cache, DIRENV_CACHE_IGNORE is set"
        return
    }
    [[ ${DIRENV_CACHE_DEBUG:-0} -gt 1 ]] && {
        set_x
        set -uo pipefail
    }
    local cache_filename=${1:-.env}
    local cache_file=$(get_cache_file "$cache_filename")

    # if cache exists and nonzero
    if [[ -s "$cache_file" ]]; then
        # Load preemptively
        load_cache "$cache_file"
        # Then verify (and reload if necessary)
        verify_cache "$cache_file"
    else
        _debug "Rebuilding cache: ${cache_file} missing or zero"
        build_and_load_cache "$cache_file"
    fi
    exit $?
}
#+end_src

*** Get cache file
#+begin_src bash
get_cache_file() {
    # Ensure the cache file is in the same directory as the RC file
    local cache_filename=${1:?"Cache filename is required"}
    local rcfile=$(find_up ".envrc")
    builtin echo -n "${rcfile%%/.*}/$cache_filename"
}
#+end_src

** Cache validity

#+begin_src bash
verify_cache () {
    local cache_file=${1:?"Cache file required"}

    # runs direnv current for all .Path in $DIRENV_WATCHES (in parallel)
    # xargs will return 0 only if the command is successful for all inputs
    direnv show_dump "$DIRENV_WATCHES" | jq -r '.[]|.Path' | xargs -n1 -P0 direnv current
    local status=$?
    if [[ $status -gt 0 ]]; then
        _debug "Cache is stale, rebuilding"
        build_and_load_cache "$cache_file"
    fi
}
#+end_src

** Build cache

#+begin_src bash
build_cache() {
    # Builds the cache by calling ~direnv export~ in a clean login shell (which
    # is the "base" environment to diff against).
    #
    # * Parameters:
    #
    # - cache_file :: the dotenv file to cache into
    #
    # * Requirements:
    #
    # - jq :: to parse json export into dotenv format

    local cache_file=${1:?"Cache file required"}
    if [[ -v DIRENV_CACHE_DEBUG ]]; then
        local stderr_file=$(mktemp)
    else
        local stderr_file=/dev/null
    fi

    # we use json/jq because the bash export uses $'' c-strings which are not
    # easy to get rid of with sed
    # DIRENV_LOG_FORMAT='' will turn off direnv logging
    # DIRENV_CACHE_IGNORE=1 so that we can build the cache without using it
    local cache_contents=$(
        set -o pipefail
        env DIRENV_CACHE_IGNORE=1 DIRENV_LOG_FORMAT="" direnv export json 2>"$stderr_file" | jq -r 'to_entries | map("export \(.key)=\(.value|@sh)")[]'
    )

    local status=$?
    if [[ -v DIRENV_CACHE_DEBUG ]]; then
        local stderr_content=$(<"$stderr_file") && rm "$stderr_file"
    else
        local stderr_content=""
    fi
    if [[ $status -eq 0 ]]; then
        _debug "Built cache: ${cache_file} contents: <${cache_contents}> stderr: <$stderr_content>"
        builtin echo -n "$cache_contents" >"$cache_file" || _debug "Cache build failed while writing to $cache_file"
        return
    else
        _debug "Cache build failed: $stderr_content"
        return $status
    fi
}
#+end_src

** Load cache

#+begin_src bash
load_cache() {
    local cache_file=${1:?"Cache file required"}
    # we could use dotenv instead, but we don't need `watch_file`, and this is compatible?
    source "$cache_file" || {
        _debug "Cache load failed: $cache_file"
        exit $?
    }
    _debug "Loaded from cache $cache_file"
}
#+end_src

*** build_and_load

#+begin_src bash
build_and_load_cache() {
    local cache_file=${1:?"Cache file required"}
    build_cache "$cache_file" || {
        _debug "Cache build failed"
        exit $?
    }
    load_cache "$cache_file"
}
#+end_src


** Debug printing
#+begin_src bash
_debug() {
    # Return status of this function is always the previous status.
    #
    # Prints $1 if DIRENV_CACHE_DEBUG is set. (Note that you probably have to
    # ~export~ it, not just set it, since all this code runs in a subshell)

    {
        local status=$?
        [[ -o xtrace ]] && {
            shopt -uo xtrace
            local xtrace_was_on=1
        }
    } 2>/dev/null

    local msg=${1:?"Message required"}
    [[ -v DIRENV_CACHE_DEBUG ]] && echo "$msg (status: $status)" >&2

    {
        [[ ${xtrace_was_on:-0} -eq 1 ]] && shopt -so xtrace
        return $status
    } 2>/dev/null
}
#+end_src

** Emacs local variables

#+begin_src bash :comments no
# Local Variables:
# sh-shell: bash
# End:
#+end_src
